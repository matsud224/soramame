identifierexpr
    ::= identifier
    ::= identifier '(' expression* ')'

intvalexpr
    ::= intval

doublevalexpr
    ::= doubleval

boolvalexpr
    ::= boolval

parenexpr
    ::= '(' expression ')'

primary
    ::= identifierexpr
    ::= intvalexpr
    ::= doublevalexpr
    ::= boolvalexpr
    ::= stringvalexpr
    ::= parenexpr

unary
    ::= primary
    ::= '!' unary

binoprhs
    ::= ('+' unary)*

expression
    ::=unary binoprhs

function
    ::= id '(' id:type * ')' =>type? '{' expression* '}'

program
    ::= function*
